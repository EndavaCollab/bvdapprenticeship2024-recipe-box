name: Build & Deploy RecipeBox Frontend

on:
  push:
    branches:
      - main
    paths:
      - recipe-box-frontend/**
      - .github/workflows/build_deploy_rcb_fe.yml
  pull_request:
    branches:
      - main
    paths:
      - recipe-box-backend/**
      - .github/workflows/build_deploy_rcb_fe.yml

# Azure login
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download and install maven
        run: sudo apt -qq update & sudo apt -qq install maven -y

      - name: Build web app using maven
        run: mvn install
        working-directory: recipe-box-frontend

      - name: Upload generated bundle as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-rcb-fe
          path: ./recipe-box-frontend/target

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push'}}
    environment: deploy # Azure login
    needs: build

    steps:
      - name: Login with Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
      - name: Fetch server public IP address
        run: |
          cmd_output=$(az network public-ip show \
            --resource-group apprenticeship-2024-rg \
            --name rcb-public-ip \
            --query "ipAddress" \
            --output tsv 2> ./ip_fetch_error.log) || \
            { \
              echo "Fetching IP Address failed! Please check the error."; \
              cat ./ip_fetch_error.log; \
              exit 1; \
            } \

          if [ -z "$cmd_output" ]; then
            echo "Fetching IP Address failed! Please check that the infrastructure was deployed and the query is correct."
            exit 1
          else
            echo "IP_ADDRESS=$cmd_output" > $GITHUB_ENV
            echo "Successfully fetched IP address into IP_ADDRESS"
          fi

      - name: Generate temp SSH private key file
        run: | 
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh

      - name: Trust server and fetch public key
        run: |
          ssh-keyscan -p 22 $IP_ADDRESS >> ~/.ssh/known_hosts

      - name: Create ssh host
        run: |
          cat >> ~/.ssh/config <<CONTENT
          Host rcb
            HostName $IP_ADDRESS
            User ${{ secrets.SSH_ADMIN_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
          CONTENT

      - name: Install nginx (if not installed)
        run: |
          ssh rcb <<CONTENT

          sudo apt update
          sudo apt install nginx -y

          CONTENT

      - name: Remove Nginx default site (if it exists)
        continue-on-error: true
        run: ssh rcb 'sudo rm /etc/nginx/sites-enabled/default'
        
      - name: Create config for nginx if it doesn't already exist
        continue-on-error: true
        run: |
          ssh rcb <<'CONTENT'

          sudo mkdir -p /var/www/${{ secrets.DEPLOY_DOMAIN }}/html
          sudo chown -R ${{ secrets.SSH_ADMIN_USERNAME }}:${{ secrets.SSH_ADMIN_USERNAME }} /var/www/${{ secrets.DEPLOY_DOMAIN }}/html
          sudo chmod -R 755 /var/www/${{ secrets.DEPLOY_DOMAIN }}
            
          sudo tee /etc/nginx/sites-available/${{ secrets.DEPLOY_DOMAIN}} <<'NGINX'
          server {
            listen 80 default_server;
            listen [::]:80 default_server;

            root /var/www/${{ secrets.DEPLOY_DOMAIN }}/html;
            index index.html;

            server_name ${{ secrets.DEPLOY_DOMAIN }} www.${{secrets.DEPLOY_DOMAIN}};

            location / {
              try_files $uri $uri/ =404;
            }
          }
          NGINX

          sudo ln -s /etc/nginx/sites-available/${{ secrets.DEPLOY_DOMAIN }} /etc/nginx/sites-enabled/

          CONTENT
      - name: Download built site
        uses: actions/download-artifact@v4
        with:
          name: production-rcb-fe
          path: ./rcb-webapp

      - name: Delete old site data (if there is a previous deploy on this instance)
        run: ssh rcb 'sudo rm -rf /var/www/${{ secrets.DEPLOY_DOMAIN }}/html/*'

      - name: Move built site to server
        run: scp -r ./rcb-webapp/* rcb:/var/www/${{ secrets.DEPLOY_DOMAIN }}/html

      - name: Restart Nginx
        run : ssh rcb 'sudo systemctl restart nginx'

      - name: Create / Update DNS Records on domain to point to server (domain)
        uses: everpcpc/cloudflare-dns-action@v1
        with:
          type: "A"
          name: "${{ secrets.DEPLOY_DOMAIN }}"
          content: "${{ env.IP_ADDRESS }}"
          ttl: 1
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
        
      - name: Create / Update DNS Records on domain to point to server (www.domain)
        uses: everpcpc/cloudflare-dns-action@v1
        with:
          type: "A"
          name: "www.${{ secrets.DEPLOY_DOMAIN }}"
          content: "${{ env.IP_ADDRESS }}"
          ttl: 1
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
