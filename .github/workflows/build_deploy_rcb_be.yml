name: Build & Deploy RecipeBox Backend

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

# for logging in w/ azure
permissions:
  id-token: write
  contents: read

jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Download and setup Java
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin'
            java-version: '21'

        - name: Download and install maven
          run: sudo apt update & sudo apt install maven -y

        - name: Package server app using maven
          run: mvn package -B -q -DskipTests=true # todo: remove skipping tests
          working-directory: recipe-box-backend

        - name: Upload generated bundle as an artifact
          uses: actions/upload-artifact@v4
          with:
            name: production-rcb-be
            path: ./recipe-box-backend/target/recipe-box-backend-0.0.1-SNAPSHOT.jar # adapt version / ask team to use finalName

    deploy:
      runs-on: ubuntu-latest
      # if: ${{ github.event_name == 'push'}}
      environment: deploy # for logging in w/ azure
      needs: build

      steps:
        - name: Login with Azure
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
        - name: Fetch server public IP address
          run: |
            cmd_output=$(az network public-ip show \
              --resource-group apprenticeship-2024-rg \
              --name rcb-public-ip \
              --query "ipAddress" \
              --output tsv 2> ./ip_fetch_error.log) || \
              { \
                echo "Fetching IP Address failed! Please check the error."; \
                cat ./ip_fetch_error.log; \
                exit 1; \
              } \
            
            if [ -z "$cmd_output" ]; then
              echo "Fetching IP Address failed! Please check that the infrastructure was deployed and the query is correct."
              exit 1
            else
              echo "IP_ADDRESS=$cmd_output" > $GITHUB_ENV
              echo "Successfully fetched IP address into IP_ADDRESS"
            fi

        - name: Generate temp SSH private key file
          run: | 
            mkdir ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            chmod 700 ~/.ssh

        - name: Trust server and fetch public key
          run: |
            ssh-keyscan -p 22 $IP_ADDRESS >> ~/.ssh/known_hosts

        - name: Create ssh host
          run: |
            cat >> ~/.ssh/config <<CONTENT
            Host rcb
              HostName $IP_ADDRESS
              User ${{ secrets.SSH_ADMIN_USERNAME }}
              IdentityFile ~/.ssh/id_rsa
            CONTENT

        - name: Download built package
          uses: actions/download-artifact@v4
          with:
                name: production-rcb-be
                path: ./rcb-server.jar
                
        - name: Create folder for server JAR
          run: ssh rcb 'mkdir ~/rcb-be/'
          continue-on-error: true

        - name: Install screen on server (if it's not installed)
          run: ssh rcb 'sudo apt update & sudo apt install screen'

        - name: Check if there is a screen running in the backend
          run: |
            ssh rcb <<'CONTENT'
                if ! screen -list | grep -q "rcb-be"; then
                    screen -d -m -S "rcb-be"
                else 
                    screen -S "rcb-be" -X stuff "^C"
                    sleep 10s
                fi
            CONTENT

        - name: Delete old server data (if there is any)
          run: ssh rcb 'sudo rm -rf ~/rcb-be/*'

        - name: Move backend package to server
          run: scp -r ./rcb-server.jar rcb:~/rcb-be/

        - name: Run backend on screen
          run: ssh rcb 'screen -S "rcb-be" -X stuff "java -jar ~/rcb-be/rcb-server.jar"'

        # - name: Create / Update DNS Records on domain to point to server (server.domain)
        #   uses: everpcpc/cloudflare-dns-action@v1
        #   with:
        #     type: "A"
        #     name: "server.${{secrets.DEPLOY_DOMAIN}}"
        #     content: "${{env.IP_ADDRESS}}"
        #     ttl: 1
        #     proxied: false
        #     token: ${{ secrets.CLOUDFLARE_TOKEN }}
        #     zone: ${{ secrets.CLOUDFLARE_ZONE }}
        
        # - name: Create / Update DNS Records on domain to point to server (www.server.domain)
        #   uses: everpcpc/cloudflare-dns-action@v1
        #   with:
        #     type: "A"
        #     name: "www.${{secrets.DEPLOY_DOMAIN}}"
        #     content: "${{env.IP_ADDRESS}}"
        #     ttl: 1
        #     proxied: false
        #     token: ${{ secrets.CLOUDFLARE_TOKEN }}
        #     zone: ${{ secrets.CLOUDFLARE_ZONE }}
